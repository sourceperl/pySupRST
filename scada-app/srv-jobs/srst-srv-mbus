#!/usr/bin/env python3

"""Poll modbus/TCP host (multi-threads for manage TCP links).
   Design to use data from/to SQL database."""

from configparser import ConfigParser
import logging
import schedule
import time
from threading import Thread, current_thread
import queue as queue
from pyModbusTCP.client import ModbusClient
from pyModbusTCP.utils import word_list_to_long, decode_ieee, test_bit
from pySupRST import SupRstDB


# some consts
PROCESS_NAME = 'mbus'
MBUS_REFRESH = 30
NUM_THREAD = 60

# read config file
cnf = ConfigParser()
cnf.read('/etc/sup_rst/sup_rst.conf')
# database credentials
db_user = cnf.get('db', 'rw_user')
db_pwd = cnf.get('db', 'rw_pass')

# some vars
n_queue = queue.Queue()
nodes_d = dict()


def th_mbus_worker():
    """ Modbus thread worker for multi-thread modbus IO job """
    while True:
        # get current node and process it
        node = n_queue.get()
        try:
            # process all modbus tables for current node
            for tid, t in node['tables'].items():
                node['client'].unit_id = t['unit_id']
                if t['type'] == 'coils':
                    t['data'] = node['client'].read_coils(t['address'], t['size'])
                elif t['type'] == 'words':
                    t['data'] = node['client'].read_holding_registers(t['address'], t['size'])
                elif t['type'] == 'floats':
                    regs_l = node['client'].read_holding_registers(t['address'], t['size'] * 2)
                    if regs_l:
                        t['data'] = list()
                        for w_as_32b in word_list_to_long(regs_l):
                            t['data'].append(decode_ieee(w_as_32b))
                    else:
                        t['data'] = None
                else:
                    t['data'] = None
        except Exception as e:
            logging.error('except %s : %s : %s' % (current_thread().getName(), type(e), str(e)))
        finally:
            # mark current IO task as done
            n_queue.task_done()


def job_mbus_polling():
    """ Modbus polling job: load conf. from db, queue requests for modbus threads and then update db with results """
    # init connection to database
    sup = SupRstDB(db_user=db_user, db_pwd=db_pwd, process=PROCESS_NAME)
    try:
        with sup.db.cursor() as cursor:
            # read nodes list on DB
            sql = """
            SELECT
                hosts.id AS host_id,
                hosts.hostname AS hostname,
                hosts.name AS name,
                mbus.mbus_port AS port,
                mbus.mbus_timeout AS timeout
            FROM
                `hosts`,
                `mbus`
            WHERE
                hosts.id = mbus.id_host
            AND
                mbus.mbus_inhibition = \'0\'
            GROUP BY hosts.id"""
            cursor.execute(sql)
            # format db data
            db_nodes = dict()
            for col in cursor.fetchall():
                db_nodes[col['host_id']] = dict(name=col['name'],
                                                hostname=col['hostname'],
                                                port=col['port'],
                                                timeout=col['timeout'])
            # remove node from global list if not in DB
            for hid in nodes_d.keys():
                if hid not in db_nodes:
                    nodes_d[hid]['client'].close()
                    del nodes_d[hid]
            # update global nodes list
            for hid, db_node in db_nodes.items():
                # create this node if not already exist
                if hid not in nodes_d:
                    # add new client
                    nodes_d[hid] = {}
                    nodes_d[hid]['last_is_connect'] = False
                    nodes_d[hid]['client'] = ModbusClient(auto_open=True)
                # update client config (socket re-open only if change)
                nodes_d[hid]['name'] = db_node['name']
                nodes_d[hid]['client'].host = db_node['hostname']
                nodes_d[hid]['client'].port = db_node['port']
                nodes_d[hid]['client'].timeout = db_node['timeout']
                # update host tables
                cursor.execute('SELECT * FROM `mbus_tables` WHERE `id_host` = %s', hid)
                db_tables = cursor.fetchall()
                tables = dict()
                for db_table in db_tables:
                    tables[db_table['id']] = {'unit_id': db_table['unit_id'],
                                              'type': db_table['type'],
                                              'address': db_table['address'],
                                              'size': db_table['size']}
                # fill nodes dict
                nodes_d[hid]['tables'] = tables
            # fill modbus thread queue with node data
            for hid in nodes_d:
                n_queue.put(nodes_d[hid])
            # thread do all the modbus stuff
            # wait all thread ends (queue is empty)
            n_queue.join()
            # process result store to DB
            for hid, node in nodes_d.items():
                # log OK/KO status change
                is_connect = node['client'].is_open
                if is_connect != node['last_is_connect']:
                    sup.alarm('RTU "%s" link %s' % (node['name'], 'OK' if is_connect else 'KO'), id_host=hid)
                    node['last_is_connect'] = is_connect
                # process each modbus table
                for tid, tbl in node['tables'].items():
                    # status ok ?
                    if tbl['data'] is not None:
                        # modbus table status : good
                        cursor.execute('UPDATE `mbus_tables` SET `status`=\'G\', `update`=NOW() WHERE `id`=%s', tid)
                        # ts for this table
                        cursor.execute('SELECT * FROM `mbus_ts` WHERE `id_table`=%s', tid)
                        for db_ts in cursor.fetchall():
                            try:
                                if tbl['type'] == 'coils':
                                    ts = bool(tbl['data'][db_ts['index']])
                                elif tbl['type'] == 'words':
                                    ts = test_bit(tbl['data'][db_ts['index']], db_ts['bit'])
                                else:
                                    raise TypeError
                                sup.set_ts(db_ts['tag'], ts, id_host=hid)
                            except (IndexError, TypeError):
                                sup.set_ts(db_ts['tag'], None, id_host=hid)
                        # tm for this table
                        cursor.execute('SELECT * FROM `mbus_tm` WHERE `id_table`=%s', tid)
                        for db_tm in cursor.fetchall():
                            try:
                                if tbl['type'] == 'words':
                                    tm = int(tbl['data'][db_tm['index']])
                                elif tbl['type'] == 'floats':
                                    tm = float(tbl['data'][db_tm['index']])
                                else:
                                    raise TypeError
                                sup.set_tm(db_tm['tag'], tm, id_host=hid)
                            except (IndexError, TypeError):
                                sup.set_tm(db_tm['tag'], None, id_host=hid)
                        # tg for this table
                        cursor.execute('SELECT * FROM `mbus_tg` WHERE `id_table`=%s', tid)
                        for db_tg in cursor.fetchall():
                            try:
                                if tbl['type'] == 'words':
                                    tg = int(tbl['data'][db_tg['index']])
                                else:
                                    raise TypeError
                                sup.set_tg(db_tg['tag'], tg)
                            except (IndexError, TypeError):
                                sup.set_tg(db_tg['tag'], None)
                    else:
                        # modbus table status : error
                        cursor.execute('UPDATE `mbus_tables` SET `status`=\'E\', `update`=NOW() WHERE `id`=%s', tid)
                        # ts/tm/tg status : error
                        cursor.execute('UPDATE `mbus_ts` SET `error`=\'1\' WHERE `id_table`=%s', tid)
                        cursor.execute('UPDATE `mbus_tm` SET `error`=\'1\' WHERE `id_table`=%s', tid)
                        cursor.execute('UPDATE `mbus_tg` SET `error`=\'1\' WHERE `id_table`=%s', tid)
    finally:
        sup.close()


if __name__ == '__main__':
    # logging setup
    logging.basicConfig(format='%(asctime)s %(message)s', level=logging.DEBUG)
    logging.getLogger('schedule').propagate = False
    logging.getLogger('schedule').addHandler(logging.NullHandler())

    # launch threads to process queue
    for _ in range(NUM_THREAD):
        worker = Thread(target=th_mbus_worker, args=())
        worker.setDaemon(True)
        worker.start()

    # init schedule
    schedule.every(MBUS_REFRESH).seconds.do(job_mbus_polling)

    # first call at startup
    job_mbus_polling()

    # main loop
    while True:
        schedule.run_pending()
        time.sleep(1.0)
