#!/usr/bin/env python3

"""Remove a host and all objects related to it from DB."""

from pySupRST import SupRstDB
import argparse
import sys

# some consts
# DB
DB_USER = 'srst-utils'
DB_PWD = 'sup_rst'
PROCESS_NAME = 'rm'


# some routines
def query_yes_no(question, default='no'):
    """Ask a yes/no question via raw_input() and return their answer.

    "question" is a string that is presented to the user.
    "default" is the presumed answer if the user just hits <Enter>.
        It must be "yes" (the default), "no" or None (meaning
        an answer is required of the user).

    The "answer" return value is True for "yes" or False for "no".
    """
    valid = {'yes': True, 'y': True, 'ye': True,
             'no': False, 'n': False}
    if default is None:
        prompt = ' [y/n] '
    elif default == 'yes':
        prompt = ' [Y/n] '
    elif default == 'no':
        prompt = ' [y/N] '
    else:
        raise ValueError('invalid default answer: \'%s\'' % default)

    while True:
        sys.stdout.write(question + prompt)
        choice = input().lower()
        if default is not None and choice == '':
            return valid[default]
        elif choice in valid:
            return valid[choice]
        else:
            sys.stdout.write('Please respond with \'yes\' or \'no\' '
                             '(or \'y\' or \'n\').\n')


def do_sql(sql):
    """do SQL request and echo result"""
    nb_row = cursor.execute(sql)
    if nb_row:
        print(sql)
        print('%i row(s) affected' % nb_row)


def check_id_host(value):
    """Check ID host validity (for argparse validation)."""
    i = int(value)
    if i <= 0:
        raise argparse.ArgumentTypeError("%s is an invalid positive int value" % value)
    return i


# parse args
parser = argparse.ArgumentParser()
parser.add_argument('id_host', type=check_id_host, help='ID of the host in DB')
parser.add_argument('-f', action='store_true', default=False, help='Force remove even if icmp or mbus is active')
args = parser.parse_args()

# init connection to database
sup = SupRstDB(db_user=DB_USER, db_pwd=DB_PWD, process=PROCESS_NAME)
try:
    with sup.db.cursor() as cursor:
        no_rm = False
        # read host information
        if cursor.execute('SELECT * FROM `hosts` WHERE `id` = %i ' % args.id_host):
            host_db = cursor.fetchone()
            print('find host "%s" at address "%s"' % (host_db['name'], host_db['hostname']))
        if cursor.execute('SELECT * FROM `icmp` WHERE `id_host` = %i ' % args.id_host):
            icmp_db = cursor.fetchone()
            if not icmp_db['icmp_inhibition']:
                print('WARN: icmp is turn on for this host')
                no_rm = True
            else:
                print('icmp is turn off for this host')
        if cursor.execute('SELECT * FROM `mbus` WHERE `id_host` = %i ' % args.id_host):
            mbus_db = cursor.fetchone()
            if not mbus_db['mbus_inhibition']:
                print('WARN: mbus is turn on for this host')
                no_rm = True
            else:
                print('mbus is turn off for this host')
        if no_rm and not args.f:
            print('icmp and/or mbus is active for this host you must turn off before remove it (or use -f)')
            exit(1)

        # check remove ok
        if query_yes_no('remove ?', default='no'):
            print('do SQL DELETE:')
            # remove icmp tables
            for name in ('alarms', 'icmp', 'icmp_history', 'icmp_index', 'icmp_rtt_log'):
                do_sql('DELETE FROM `%s` WHERE `%s`.`id_host` = \'%s\'' % (name, name, args.id_host))
            # remove mbus tables
            for name in ('mbus_ts', 'mbus_tm', 'mbus_tg'):
                do_sql('DELETE FROM `%s` WHERE `%s`.`id_table` '
                       'IN (SELECT `id` FROM `mbus_tables` WHERE `id_host` = %i)' % (name, name, args.id_host))
            for name in ('mbus_v_ts', 'mbus_v_tm', 'mbus_v_tg', 'mbus_tables', 'mbus'):
                do_sql('DELETE FROM `%s` WHERE `%s`.`id_host` = \'%s\'' % (name, name, args.id_host))
            # remove host
            do_sql('DELETE FROM `hosts` WHERE `hosts`.`id` = \'%s\'' % args.id_host)
        else:
            print('abort remove')
finally:
    sup.close()
