#!/usr/bin/env python3

"""Do all DB stuff as cron job."""

from configparser import ConfigParser
from datetime import datetime
import logging
import math
import time
import traceback
import schedule
from pySupRST import SupRstDB

# some consts
PROCESS_NAME = 'db_adm'

# read config file
cnf = ConfigParser()
cnf.read('/etc/sup_rst/sup_rst.conf')
# database credentials
db_user = cnf.get('db', 'rw_user')
db_pwd = cnf.get('db', 'rw_pass')


# some routines
def safe_eval(eval_str):
    """Safely eval a python code string (for sup_rst math compute)."""

    try:
        # clean eval_str
        eval_str = eval_str.replace('\n', ' ').replace('\r', ' ')
        # TODO remove this after syntax compatibility fix
        # perl expr compatibility
        eval_str = eval_str.replace('!', 'not ').replace('?', 'if').replace(':', 'else')
        # remove all python built-in (float, len, callable, eval...)
        glob_ctx = {'__builtins__': None}
        # allow this function only
        loc_ctx = {'abs': abs,
                   'bool': bool, 'int': int, 'float': float,
                   'sqrt': math.sqrt}
        return eval(eval_str, glob_ctx, loc_ctx)
    except(SyntaxError, NameError, ValueError, ZeroDivisionError):
        return None


# call every 30s
def job_every_30s():
    """Process virtual sup_rst things (v_ts, v_tm, v_tg) and create alarm message on v_grad trig."""

    sup = SupRstDB(db_user=db_user, db_pwd=db_pwd, process=PROCESS_NAME)
    try:
        # process virtual TS
        with sup.db.cursor() as cursor:
            cursor.execute('SELECT'
                           ' `mbus_ts`.`tag` AS `tag`,'
                           ' `mbus_v_ts`.`script` AS `script`,'
                           ' `mbus_v_ts`.`id_host` AS `id_host` '
                           'FROM `mbus_ts`, `mbus_v_ts` '
                           'WHERE `mbus_ts`.`id` = `mbus_v_ts`.`id_ts`')
            for db_v_ts in cursor.fetchall():
                s = sup.strip_tags(db_v_ts['script'])
                ts = safe_eval(s)
                sup.set_ts(db_v_ts['tag'], ts, id_host=db_v_ts['id_host'])
        # process virtual TM
        with sup.db.cursor() as cursor:
            cursor.execute('SELECT'
                           ' `mbus_tm`.`tag` AS `tag`,'
                           ' `mbus_v_tm`.`script` AS `script`,'
                           ' `mbus_v_tm`.`id_host` AS `id_host` '
                           'FROM `mbus_tm`, `mbus_v_tm` '
                           'WHERE `mbus_tm`.`id` = `mbus_v_tm`.`id_tm`')
            for db_v_tm in cursor.fetchall():
                s = sup.strip_tags(db_v_tm['script'])
                tm = safe_eval(s)
                sup.set_tm(db_v_tm['tag'], tm, id_host=db_v_tm['id_host'])
        # process TM gradient
        with sup.db.cursor() as cursor:
            cursor.execute('SELECT'
                           ' `mbus_tm`.`id` AS `id`,'
                           ' `mbus_tm`.`tag` AS `tag`,'
                           ' `mbus_tm`.`tm` AS `tm`,'
                           ' `mbus_tm`.`label` AS `label`,'
                           ' `mbus_tm`.`unit` AS `unit`,'
                           ' `mbus_v_grad`.`last_tm` AS `last_tm`,'
                           ' `mbus_v_grad`.`max_grad` AS `max_grad`,'
                           ' `mbus_tables`.`id_host` AS `id_host` '
                           'FROM'
                           ' `mbus_tm`, `mbus_v_grad`, `mbus_tables` '
                           'WHERE'
                           ' `mbus_tm`.`id` = `mbus_v_grad`.`id_tm` '
                           'AND'
                           ' `mbus_tables`.`id` = `mbus_tm`.`id_table` '
                           'AND'
                           ' `mbus_tm`.`use` =  \'1\' '
                           'AND'
                           ' `mbus_v_grad`.`use` = \'1\'')
            for db_grad in cursor.fetchall():
                window_h = db_grad['last_tm'] + db_grad['max_grad']
                window_l = db_grad['last_tm'] - db_grad['max_grad']
                tm = int(db_grad['tm'])
                last_tm = int(db_grad['last_tm'])
                # edit alarm when tm is not in gradient window
                if not window_l < db_grad['tm'] < window_h:
                    sup.alarm('"%s" gradient (%s) -> (%s) %s'
                              % (db_grad['label'], last_tm, tm, db_grad['unit']),
                              id_host=db_grad['id_host'])
                # update "last_tm" db record
                cursor.execute('UPDATE `mbus_v_grad` SET `last_tm`=%s WHERE `id_tm`=%s', (tm, db_grad['id']))
        # process virtual TG
        with sup.db.cursor() as cursor:
            if cursor.execute('SELECT UNIX_TIMESTAMP() AS `uts`'):
                uts = cursor.fetchone()['uts']
                cursor.execute('SELECT'
                               ' `mbus_tg`.`id` AS `id`,'
                               ' `mbus_tg`.`use` AS `use`,'
                               ' `mbus_tg`.`error` AS `error`,'
                               ' `mbus_tg`.`tag` AS `tag`,'
                               ' `mbus_tg`.`label` AS `label`,'
                               ' `mbus_tg`.`tg` AS `tg`,'
                               ' `mbus_tg`.`unit` AS `unit`,'
                               ' `mbus_tg`.`weight` AS `weight`,'
                               ' `mbus_v_tg`.`id_host` AS `id_host`,'
                               ' `mbus_v_tg`.`script` AS `script`,'
                               ' `mbus_v_tg`.`i_time` AS `i_time`,'
                               ' `mbus_v_tg`.`c_time` AS `c_time` '
                               'FROM'
                               ' `mbus_tg` , `mbus_v_tg` '
                               'WHERE'
                               ' `mbus_tg`.`id` = `mbus_v_tg`.`id_tg` '
                               'AND'
                               ' `mbus_tg`.`use` =  \'1\'')
                for db_v_tg in cursor.fetchall():
                    val = safe_eval(sup.strip_tags(db_v_tg['script']))
                    # check eval success
                    if val is not None:
                        # compute virtual tg
                        ratio = (uts - db_v_tg['c_time']) / db_v_tg['i_time']
                        tg = int(val * ratio * db_v_tg['weight'])
                        # update no error and tg update
                        cursor.execute('UPDATE `mbus_tg` SET `tg`=`tg`+%s, `error`=\'0\' '
                                       'WHERE `id`=%s', (tg, db_v_tg['id']))
                        # update compute time
                        cursor.execute('UPDATE `mbus_v_tg` SET `c_time`= %s '
                                       'WHERE `id_tg`=%s', (uts, db_v_tg['id']))
                    else:
                        # update error status
                        cursor.execute('UPDATE `mbus_tg` SET `error`=\'1\' '
                                       'WHERE `id`=%s', db_v_tg['id'])
    except (Exception, ):
        logging.error(traceback.format_exc())
    finally:
        sup.close()


# call every hours at 0 min
def job_every_xxh00():
    """Process TG for hourly and daily top."""

    sup = SupRstDB(db_user=db_user, db_pwd=db_pwd, process=PROCESS_NAME)
    try:
        with sup.db.cursor() as cursor:
            sql = """SELECT
                `mbus_tg`.`id` AS `id`,
                `mbus_tg`.`tag` AS `tag`,
                `mbus_tg`.`tg` AS `tg`,
                `mbus_tg`.`last_tg_h` AS `last_tg_h`
            FROM
                `mbus_tg`
            WHERE
                `mbus_tg`.`use` =  '1'"""
            cursor.execute(sql)
            for db_tg in cursor.fetchall():
                # compute hourly tg
                last_h_inc = db_tg['tg'] - db_tg['last_tg_h']
                # log hourly data
                cursor.execute('INSERT INTO `mbus_tg_log` (`id_tg` , `type`, `tg` , `update`) '
                               'VALUES (%s, \'H\', %s, NOW())', (db_tg['id'], last_h_inc))
                # update tg record: set hourly field to current tg value
                cursor.execute('UPDATE `mbus_tg` SET `last_tg_h`=%s '
                               'WHERE `id`=%s', (db_tg['tg'], db_tg['id']))
                # process daily at 6h
                if datetime.now().hour == 6:
                    # log daily data
                    cursor.execute('INSERT INTO `mbus_tg_log` (`id_tg` , `type`, `tg` , `update`) '
                                   'VALUES (%s, \'J\', %s, NOW())', (db_tg['id'], db_tg['tg']))
                    # update tg record: reset all fields
                    cursor.execute('UPDATE `mbus_tg` SET `last_tg_h`=\'0\', tg=\'0\' '
                                   'WHERE `id`=%s', db_tg['id'])
    except (Exception, ):
        logging.error(traceback.format_exc())
    finally:
        sup.close()


# call at 00h00 every day
def job_00h00():
    """Manage ICMP index."""

    sup = SupRstDB(db_user=db_user, db_pwd=db_pwd, process=PROCESS_NAME)
    try:
        with sup.db.cursor() as cursor:
            # store current ICMP index at 00h00
            cursor.execute('INSERT INTO `icmp_index` (id_host, date_time, up_index, down_index) '
                           'SELECT id_host, NOW(), icmp_up_index, icmp_down_index FROM `icmp` '
                           'WHERE `icmp_inhibition` = \'0\';')
    except (Exception, ):
        logging.error(traceback.format_exc())
    finally:
        sup.close()


# call at 00h05 every day
def job_00h05():
    """DB admin stuff: purge and optimize nightly tasks."""

    sup = SupRstDB(db_user=db_user, db_pwd=db_pwd, process=PROCESS_NAME)
    try:
        with sup.db.cursor() as cursor:
            # purge alarms log
            cursor.execute('DELETE FROM `alarms` WHERE (TO_DAYS(NOW()) - TO_DAYS(`date_time`)) > 365;')

            # purge icmp log (365 for state, 100 days for index, 4 days for rtt)
            cursor.execute('DELETE FROM `icmp_history` WHERE (TO_DAYS(NOW()) - TO_DAYS(`event_date`)) > 365;')
            cursor.execute('DELETE FROM `icmp_index` WHERE (TO_DAYS(NOW()) - TO_DAYS(`date_time`)) > 100;')
            cursor.execute('DELETE FROM `icmp_rtt_log` WHERE (TO_DAYS(NOW()) - TO_DAYS(`rtt_datetime`)) > 4;')

            # delete orphan id for icmp history
            cursor.execute('DELETE FROM `icmp_history` WHERE `id_host` NOT IN (SELECT `id` FROM `hosts`);')
            cursor.execute('DELETE FROM `icmp_index` WHERE `id_host` NOT IN (SELECT `id` FROM `hosts`);')
            cursor.execute('DELETE FROM `icmp_rtt_log` WHERE `id_host` NOT IN (SELECT `id` FROM `hosts`);')

            # purge modbus history (2 years for ts, 365 days for tg, 8 days for tm)
            cursor.execute('DELETE FROM `mbus_ts_log` WHERE (TO_DAYS(NOW()) - TO_DAYS(`update`)) > 2 * 365;')
            cursor.execute('DELETE FROM `mbus_tm_log` WHERE (TO_DAYS(NOW()) - TO_DAYS(`update`)) > 8;')
            cursor.execute('DELETE FROM `mbus_tg_log` WHERE (TO_DAYS(NOW()) - TO_DAYS(`update`)) > 365;')

            # delete orphan id for mbus ts/tm/tg log
            cursor.execute('DELETE FROM `mbus_ts_log` WHERE `id_ts` NOT IN (SELECT `id` FROM `mbus_ts`);')
            # excess load for this request, turn off
            # cursor.execute('DELETE FROM `mbus_tm_log` WHERE `id_tm` NOT IN (SELECT `id` FROM `mbus_tm`);')
            cursor.execute('DELETE FROM `mbus_tg_log` WHERE `id_tg` NOT IN (SELECT `id` FROM `mbus_tg`);')

            # optimize table (MyISAM only)
            cursor.execute('OPTIMIZE TABLE '
                           '`alarms`, `hosts`, `icmp`, `icmp_history`, `icmp_index`, '
                           '`icmp_rtt_log`, `mbus`, `mbus_tables`, `mbus_tg`, `mbus_tg_log`, '
                           '`mbus_tm`, `mbus_tm_log`, `mbus_ts`, `mbus_ts_log`, `mbus_v_grad`, `mbus_v_tg`, '
                           '`mbus_v_tm`, `mbus_v_ts`, `variables`, `subnets`;')
    except (Exception, ):
        logging.error(traceback.format_exc())
    finally:
        sup.close()


if __name__ == '__main__':
    # logging setup
    logging.basicConfig(format='%(asctime)s %(message)s')
    logging.getLogger('schedule').propagate = False
    logging.getLogger('schedule').addHandler(logging.NullHandler())

    # init schedule
    # WARN: mysql backup (include db sup_rst) every day at 19h10 (by cron)
    for hour in range(24):
        schedule.every().day.at('%02d:00' % hour).do(job_every_xxh00)
    schedule.every().day.at('00:00').do(job_00h00)
    schedule.every().day.at('00:05').do(job_00h05)
    schedule.every(30).seconds.do(job_every_30s)

    # first call at startup
    job_every_30s()

    # main loop
    while True:
        schedule.run_pending()
        time.sleep(1.0)
