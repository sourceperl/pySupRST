#!/usr/bin/env python3

"""Simple HTTP REST server to interface with sup_rst."""

from configparser import ConfigParser
from http.server import BaseHTTPRequestHandler, HTTPServer
import json
import logging
import traceback
from pySupRST import SupRstDB

# some consts
PROCESS_NAME = "rest-srv"

# read config file
cnf = ConfigParser()
cnf.read('/etc/sup_rst/sup_rst.conf')
# database credentials
db_user = cnf.get('db', 'ro_user')
db_pwd = cnf.get('db', 'ro_pass')


# some class
class HttpHandler(BaseHTTPRequestHandler):
    """ Custom HTTP request handler """

    def do_GET(self):
        """ process HTTP GET request for exp_mbus_tm.json file """
        if self.path == "/exp_mbus_tm.json":
            json_msg = get_json_mbus_tm()
            if json_msg:
                self.send_response(200)
                self.send_header("Content-type", "application/json")
                self.end_headers()
                self.wfile.write(json_msg)
            else:
                self.send_response(500)
        else:
            self.send_response(404)

    def log_message(self, format, *args):
        """ avoid logging message on request """
        return None


# some function
def get_json_mbus_tm():
    """ return all tm current value as a json message or None on error"""
    try:
        # link to SUP_RST database
        sup = SupRstDB(db_user=db_user, db_pwd=db_pwd, process=PROCESS_NAME)
        try:
            # format all TM values as json msg (with log turn on and no error)
            with sup.db.cursor() as cursor:
                cursor.execute("SELECT `tag`, `tm`, `unit` FROM `mbus_tm` WHERE `log` = '1' and `error` = '0'")
                return json.dumps(cursor.fetchall()).encode()
        finally:
            sup.close()
    except (Exception, ):
        logging.error(traceback.format_exc())
        return None


if __name__ == "__main__":
    # logging setup
    logging.basicConfig(format='%(asctime)s %(message)s')
    # start server
    HTTPServer(("", 8080), HttpHandler).serve_forever()
